/// <reference types="react" />
import type { CountInfoProps } from '../';
export interface CountInfoExtraProps<T> extends Partial<CountInfoProps> {
    editable: boolean;
    showTools: boolean;
    value: T;
    parentValue?: T;
    keyName?: string | number;
    namespace?: Array<string | number>;
    setValue?: React.Dispatch<React.SetStateAction<T>>;
    setParentValue?: React.Dispatch<React.SetStateAction<T>>;
    /**
     * When a callback function is passed in, add functionality is enabled. The callback is invoked before additions are completed.
     * @returns {boolean} Returning false from onAdd will prevent the change from being made.
     */
    onAdd?: (keyOrValue: string, newValue: T, value: T, isAdd: boolean) => boolean;
    /**
     * When a callback function is passed in, delete functionality is enabled. The callback is invoked before deletions are completed.
     * @returns Returning false from onDelete will prevent the change from being made.
     */
    onDelete?: (keyName: string | number, value: T, parentValue: T | null, opt: {
        namespace?: Array<string | number>;
    }) => boolean;
}
export declare function CountInfoExtra<T extends object>(props: CountInfoExtraProps<T>): import("react/jsx-runtime").JSX.Element | null;
export declare namespace CountInfoExtra {
    var displayName: string;
}

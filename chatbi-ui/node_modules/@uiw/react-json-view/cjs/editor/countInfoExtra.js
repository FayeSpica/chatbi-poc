"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.CountInfoExtra = CountInfoExtra;
var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));
var _defineProperty2 = _interopRequireDefault(require("@babel/runtime/helpers/defineProperty"));
var _objectSpread3 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _react = require("react");
var _add = require("./icon/add");
var _delete = require("./icon/delete");
var _jsxRuntime = require("react/jsx-runtime");
function CountInfoExtra(props) {
  var visible = props.visible,
    showTools = props.showTools,
    editable = props.editable,
    keyName = props.keyName,
    value = props.value,
    namespace = props.namespace,
    parentValue = props.parentValue,
    setValue = props.setValue,
    setParentValue = props.setParentValue,
    onAdd = props.onAdd,
    onDelete = props.onDelete;
  if (!visible || !showTools) return null;
  var click = /*#__PURE__*/function () {
    var _ref = (0, _asyncToGenerator2["default"])( /*#__PURE__*/(0, _regeneratorRuntime2["default"])().mark(function _callee(event) {
      var keyOrValue, isArray, isAdd, result, maybeAdd;
      return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            event.stopPropagation();
            keyOrValue = 'AddKeyOrValue';
            isArray = Array.isArray(value);
            isAdd = isArray ? true : !(keyOrValue in value);
            result = isArray ? [].concat((0, _toConsumableArray2["default"])(value), [keyOrValue]) : (0, _objectSpread3["default"])((0, _objectSpread3["default"])({}, value), {}, (0, _defineProperty2["default"])({}, keyOrValue, undefined));
            if (!(onAdd && setValue)) {
              _context.next = 10;
              break;
            }
            _context.next = 8;
            return onAdd(keyOrValue, result, props.value, isAdd);
          case 8:
            maybeAdd = _context.sent;
            if (maybeAdd) {
              setValue(result);
            }
          case 10:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function click(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var deleteHandle = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/(0, _regeneratorRuntime2["default"])().mark(function _callee2(event) {
      var maybeDelete;
      return (0, _regeneratorRuntime2["default"])().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            event.stopPropagation();
            if (!(onDelete && (keyName || typeof keyName === 'number') && parentValue)) {
              _context2.next = 6;
              break;
            }
            _context2.next = 4;
            return onDelete(keyName, value, parentValue, {
              namespace: namespace
            });
          case 4:
            maybeDelete = _context2.sent;
            if (maybeDelete && setParentValue) {
              if (Array.isArray(parentValue)) {
                parentValue.splice(keyName, 1);
                setParentValue((0, _toConsumableArray2["default"])(parentValue));
              } else if (keyName in parentValue) {
                delete parentValue[keyName];
                setParentValue((0, _objectSpread3["default"])({}, parentValue));
              }
            }
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function deleteHandle(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [editable && onAdd && /*#__PURE__*/(0, _jsxRuntime.jsx)(_add.AddIcon, {
      onClick: click
    }), editable && onDelete && parentValue && /*#__PURE__*/(0, _jsxRuntime.jsx)(_delete.DeleteIcon, {
      onClick: deleteHandle
    })]
  });
}
CountInfoExtra.displayName = 'JVR.CountInfoExtra';
/// <reference types="react" />
import type { TypeProps } from '../value';
import type { JsonViewEditorProps } from './';
export interface ReValueProps<T extends object> extends React.HTMLAttributes<HTMLSpanElement> {
    onEdit?: JsonViewEditorProps<T>['onEdit'];
    quotes?: JsonViewEditorProps<T>['quotes'];
    keyName?: JsonViewEditorProps<T>['keyName'];
    type: TypeProps['type'];
    value?: unknown;
    parentValue?: T;
    data?: T;
    visible?: boolean;
    namespace?: Array<string | number>;
    editableValue?: boolean;
    displayDataTypes?: boolean;
    setValue?: React.Dispatch<React.SetStateAction<T>>;
    onDelete?: JsonViewEditorProps<T>['onDelete'];
}
export declare function ReValue<T extends object>(props: ReValueProps<T>): import("react/jsx-runtime").JSX.Element;
export declare namespace ReValue {
    var displayName: string;
}

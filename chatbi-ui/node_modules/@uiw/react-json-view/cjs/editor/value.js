"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ReValue = ReValue;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _regeneratorRuntime2 = _interopRequireDefault(require("@babel/runtime/helpers/regeneratorRuntime"));
var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _value = require("../value");
var _edit = require("./icon/edit");
var _delete = require("./icon/delete");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["type", "value", "setValue", "data", "keyName", "visible", "quotes", "style", "children", "namespace", "displayDataTypes", "editableValue", "parentValue", "onDelete", "onEdit"];
var Quotes = function Quotes(_ref) {
  var show = _ref.show,
    style = _ref.style,
    quotes = _ref.quotes;
  if (!quotes || !show) return;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", {
    style: style,
    children: quotes
  });
};
function ReValue(props) {
  var _typeMap$typeStr;
  var type = props.type,
    value = props.value,
    setValue = props.setValue,
    data = props.data,
    keyName = props.keyName,
    visible = props.visible,
    quotes = props.quotes,
    style = props.style,
    children = props.children,
    namespace = props.namespace,
    displayDataTypes = props.displayDataTypes,
    editableValue = props.editableValue,
    parentValue = props.parentValue,
    onDelete = props.onDelete,
    onEdit = props.onEdit,
    reset = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var _useState = (0, _react.useState)(false),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    editable = _useState2[0],
    setEditable = _useState2[1];
  var $edit = (0, _react.useRef)(null);
  var _useState3 = (0, _react.useState)(type),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    curentType = _useState4[0],
    setCurentType = _useState4[1];
  var _useState5 = (0, _react.useState)(value),
    _useState6 = (0, _slicedToArray2["default"])(_useState5, 2),
    curentChild = _useState6[0],
    setCurentChild = _useState6[1];
  (0, _react.useEffect)(function () {
    return setCurentChild(value);
  }, [value]);
  var click = function click(evn) {
    evn.stopPropagation();
    if (!editableValue) return;
    if ($edit.current) {
      var _$edit$current;
      setEditable(true);
      $edit.current.setAttribute('contentEditable', 'true');
      (_$edit$current = $edit.current) === null || _$edit$current === void 0 || _$edit$current.focus();
    }
  };
  var keyDown = function keyDown(evn) {
    if (!editableValue) return;
    if (evn.key === 'Enter') {
      evn.stopPropagation();
      evn.preventDefault();
      setEditable(false);
      if ($edit.current) {
        $edit.current.setAttribute('contentEditable', 'false');
      }
    }
  };
  var blur = /*#__PURE__*/function () {
    var _ref2 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/(0, _regeneratorRuntime2["default"])().mark(function _callee() {
      var text, _typeStr, dt, result, _getValueString, oldChildStr;
      return (0, _regeneratorRuntime2["default"])().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            if (editableValue) {
              _context.next = 2;
              break;
            }
            return _context.abrupt("return");
          case 2:
            setEditable(false);
            if (!$edit.current) {
              _context.next = 16;
              break;
            }
            $edit.current.setAttribute('contentEditable', 'false');
            text = $edit.current.innerHTML;
            _typeStr = curentType;
            if (curentType === 'number' || curentType === 'float') {
              text = Number(text);
              _typeStr = (0, _value.isFloat)(text) ? 'float' : 'number';
            }
            if (curentType === 'url' && typeof text === 'string') {
              text = new URL(text);
              _typeStr = 'url';
            }
            if (Number.isNaN(text)) {
              _typeStr = 'number';
            }
            if (typeof text === 'string' && /^(true|false)$/gi.test(text)) {
              text = /^(true)$/gi.test(text) ? true : false;
              _typeStr = 'boolean';
            } else if (typeof text === 'string' && /^[\d]+n$/gi.test(text)) {
              text = BigInt(text.replace(/n$/gi, ''));
              _typeStr = 'bigint';
            } else if (typeof text === 'string' && /^(null)$/gi.test(text)) {
              text = null;
              _typeStr = 'null';
            } else if (typeof text === 'string' && /^(NaN)$/gi.test(text)) {
              text = NaN;
              _typeStr = 'NaN';
            } else if (typeof text === 'string' && /^(undefined)$/gi.test(text)) {
              text = undefined;
              _typeStr = 'undefined';
            } else if (typeof text === 'string') {
              try {
                if (text && text.length > 19 && !isNaN(Date.parse(text))) {
                  dt = new Date(text);
                  text = dt;
                  _typeStr = 'date';
                }
              } catch (error) {}
            }
            if (!onEdit) {
              _context.next = 16;
              break;
            }
            _context.next = 14;
            return onEdit({
              type: 'value',
              value: text,
              oldValue: curentChild,
              namespace: namespace
            });
          case 14:
            result = _context.sent;
            if (result) {
              setCurentType(_typeStr);
              setCurentChild(text);
            } else {
              _getValueString = (0, _value.getValueString)(curentChild), oldChildStr = _getValueString.content;
              $edit.current.innerHTML = String(oldChildStr);
            }
          case 16:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function blur() {
      return _ref2.apply(this, arguments);
    };
  }();
  var defaultStyle = {
    minWidth: 34,
    minHeight: 18,
    paddingInline: 3,
    display: 'inline-block'
  };
  var _getValueString2 = (0, _value.getValueString)(curentChild),
    typeStr = _getValueString2.type,
    childStr = _getValueString2.content;
  var color = ((_typeMap$typeStr = _value.typeMap[typeStr]) === null || _typeMap$typeStr === void 0 ? void 0 : _typeMap$typeStr.color) || '';
  var spanProps = (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
    onBlur: blur,
    onKeyDown: keyDown,
    spellCheck: false,
    style: editable ? (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, style), defaultStyle), {}, {
      color: color
    }) : (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, style), {}, {
      color: color
    })
  });
  var typeView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Type, {
    type: typeStr
  });
  if (typeStr === 'null' || typeStr === 'undefined' || type.toLocaleLowerCase() === 'nan') {
    typeView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {});
  }
  var deleteHandle = /*#__PURE__*/function () {
    var _ref3 = (0, _asyncToGenerator2["default"])( /*#__PURE__*/(0, _regeneratorRuntime2["default"])().mark(function _callee2(evn) {
      var maybeDelete;
      return (0, _regeneratorRuntime2["default"])().wrap(function _callee2$(_context2) {
        while (1) switch (_context2.prev = _context2.next) {
          case 0:
            evn.stopPropagation();
            if (!(data && keyName && keyName in data && setValue && onDelete)) {
              _context2.next = 6;
              break;
            }
            _context2.next = 4;
            return onDelete(keyName, value, parentValue, {
              namespace: namespace
            });
          case 4:
            maybeDelete = _context2.sent;
            if (maybeDelete) {
              delete data[keyName];
              setValue((0, _objectSpread2["default"])({}, data));
            }
          case 6:
          case "end":
            return _context2.stop();
        }
      }, _callee2);
    }));
    return function deleteHandle(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [displayDataTypes && typeView, /*#__PURE__*/(0, _jsxRuntime.jsx)(Quotes, {
      style: style,
      quotes: quotes,
      show: typeStr === 'string'
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)("span", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, spanProps), {}, {
      ref: $edit,
      "data-value": childStr,
      children: typeof curentChild === 'string' ? curentChild : childStr
    })), /*#__PURE__*/(0, _jsxRuntime.jsx)(Quotes, {
      style: style,
      quotes: quotes,
      show: typeStr === 'string'
    }), visible && editableValue && onEdit && /*#__PURE__*/(0, _jsxRuntime.jsx)(_edit.EditIcon, {
      onClick: click
    }), visible && editableValue && onDelete && /*#__PURE__*/(0, _jsxRuntime.jsx)(_delete.DeleteIcon, {
      onClick: deleteHandle
    })]
  });
}
ReValue.displayName = 'JVR.ReValue';
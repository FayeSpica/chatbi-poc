"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.RootNode = exports.CountInfo = void 0;
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _toConsumableArray2 = _interopRequireDefault(require("@babel/runtime/helpers/toConsumableArray"));
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _react = require("react");
var _value = require("./value");
var _TriangleArrow = require("./arrow/TriangleArrow");
var _store = require("./store");
var _semicolon = require("./semicolon");
var _copied = require("./copied");
var _ellipsis = require("./comps/ellipsis");
var _meta = require("./comps/meta");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["value", "keyName", "className", "displayDataTypes", "components", "displayObjectSize", "enableClipboard", "highlightUpdates", "objectSortKeys", "indentWidth", "shortenTextAfterLength", "collapsed", "level", "keyid", "quotes", "namespace", "isSet", "isMap", "onCopied", "onExpand", "parentValue", "setParentValue"];
function getLength(obj) {
  try {
    return Object.keys(obj).length;
  } catch (error) {
    return -1;
  }
}
var CountInfo = exports.CountInfo = function CountInfo(_ref) {
  var children = _ref.children;
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(_value.Label, {
    style: {
      paddingLeft: 4,
      fontStyle: 'italic'
    },
    color: "var(--w-rjv-info-color, #0000004d)",
    className: "w-rjv-object-size",
    children: [children, " items"]
  });
};
CountInfo.displayName = 'JVR.CountInfo';
var RootNode = exports.RootNode = /*#__PURE__*/(0, _react.forwardRef)(function (props, ref) {
  var _expands$keyid;
  var _props$value = props.value,
    value = _props$value === void 0 ? {} : _props$value,
    keyName = props.keyName,
    className = props.className,
    _props$displayDataTyp = props.displayDataTypes,
    displayDataTypes = _props$displayDataTyp === void 0 ? true : _props$displayDataTyp,
    _props$components = props.components,
    components = _props$components === void 0 ? {} : _props$components,
    _props$displayObjectS = props.displayObjectSize,
    displayObjectSize = _props$displayObjectS === void 0 ? true : _props$displayObjectS,
    _props$enableClipboar = props.enableClipboard,
    enableClipboard = _props$enableClipboar === void 0 ? true : _props$enableClipboar,
    _props$highlightUpdat = props.highlightUpdates,
    highlightUpdates = _props$highlightUpdat === void 0 ? true : _props$highlightUpdat,
    _props$objectSortKeys = props.objectSortKeys,
    objectSortKeys = _props$objectSortKeys === void 0 ? false : _props$objectSortKeys,
    _props$indentWidth = props.indentWidth,
    indentWidth = _props$indentWidth === void 0 ? 15 : _props$indentWidth,
    _props$shortenTextAft = props.shortenTextAfterLength,
    shortenTextAfterLength = _props$shortenTextAft === void 0 ? 30 : _props$shortenTextAft,
    collapsed = props.collapsed,
    _props$level = props.level,
    level = _props$level === void 0 ? 1 : _props$level,
    _props$keyid = props.keyid,
    keyid = _props$keyid === void 0 ? 'root' : _props$keyid,
    _props$quotes = props.quotes,
    quotes = _props$quotes === void 0 ? '"' : _props$quotes,
    _props$namespace = props.namespace,
    namespace = _props$namespace === void 0 ? [] : _props$namespace,
    _props$isSet = props.isSet,
    isSet = _props$isSet === void 0 ? false : _props$isSet,
    _props$isMap = props.isMap,
    isMap = _props$isMap === void 0 ? false : _props$isMap,
    onCopied = props.onCopied,
    onExpand = props.onExpand,
    parentValue = props.parentValue,
    setParentValue = props.setParentValue,
    reset = (0, _objectWithoutProperties2["default"])(props, _excluded);
  var isArray = Array.isArray(value);
  var subkeyid = (0, _react.useId)();
  var expands = (0, _store.useExpandsStatus)();
  var expand = (_expands$keyid = expands[keyid]) !== null && _expands$keyid !== void 0 ? _expands$keyid : typeof collapsed === 'boolean' ? collapsed : typeof collapsed === 'number' ? level <= collapsed : true;
  var handle = function handle() {
    onExpand && typeof onExpand === 'function' && onExpand({
      expand: !expand,
      keyid: keyid,
      keyName: keyName,
      value: value
    });
    !expand ? _store.store.expand(keyid) : _store.store.collapse(keyid);
  };
  var _useState = (0, _react.useState)(value),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    valueData = _useState2[0],
    setValueData = _useState2[1];
  var subNodeProps = {
    components: components,
    indentWidth: indentWidth,
    displayDataTypes: displayDataTypes,
    displayObjectSize: displayObjectSize,
    enableClipboard: enableClipboard,
    highlightUpdates: highlightUpdates,
    onCopied: onCopied,
    onExpand: onExpand,
    collapsed: collapsed,
    parentValue: value,
    setParentValue: setValueData,
    quotes: quotes,
    level: level + 1,
    style: {
      paddingLeft: indentWidth
    }
  };
  var valueViewProps = {
    displayDataTypes: displayDataTypes,
    displayObjectSize: displayObjectSize,
    enableClipboard: enableClipboard,
    shortenTextAfterLength: shortenTextAfterLength,
    level: level + 1,
    parentValue: value,
    indentWidth: indentWidth,
    data: valueData,
    quotes: quotes,
    setValue: setValueData
  };
  var arrowStyle = {
    transform: "rotate(".concat(expand ? '0' : '-90', "deg)"),
    transition: 'all 0.3s'
  };
  var arrowView = components.arrow ? ( /*#__PURE__*/(0, _react.cloneElement)(components.arrow, {
    style: arrowStyle,
    'data-expand': expand,
    className: 'w-rjv-arrow'
  })) : /*#__PURE__*/(0, _jsxRuntime.jsx)(_TriangleArrow.TriangleArrow, {
    style: arrowStyle,
    className: "w-rjv-arrow"
  });
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    showTools = _useState4[0],
    setShowTools = _useState4[1];
  var eventProps = {};
  if (enableClipboard) {
    eventProps.onMouseEnter = function () {
      return setShowTools(true);
    };
    eventProps.onMouseLeave = function () {
      return setShowTools(false);
    };
  }
  (0, _react.useEffect)(function () {
    return setValueData(value);
  }, [value]);
  var nameKeys = isArray ? Object.keys(valueData).map(function (m) {
    return Number(m);
  }) : Object.keys(valueData);

  // object
  var entries = isArray ? Object.entries(valueData).map(function (m) {
    return [Number(m[0]), m[1]];
  }) : Object.entries(valueData);
  if (objectSortKeys) {
    entries = objectSortKeys === true ? entries.sort(function (_ref2, _ref3) {
      var _ref4 = (0, _slicedToArray2["default"])(_ref2, 1),
        a = _ref4[0];
      var _ref5 = (0, _slicedToArray2["default"])(_ref3, 1),
        b = _ref5[0];
      return typeof a === 'string' && typeof b === 'string' ? a.localeCompare(b) : 0;
    }) : entries.sort(function (_ref6, _ref7) {
      var _ref8 = (0, _slicedToArray2["default"])(_ref6, 1),
        a = _ref8[0];
      var _ref9 = (0, _slicedToArray2["default"])(_ref7, 1),
        b = _ref9[0];
      return typeof a === 'string' && typeof b === 'string' ? objectSortKeys(a, b) : 0;
    });
  }
  var countInfo = /*#__PURE__*/(0, _jsxRuntime.jsx)(CountInfo, {
    children: nameKeys.length
  });
  if (components.countInfo) {
    countInfo = components.countInfo({
      count: nameKeys.length,
      level: level,
      visible: expand
    }) || countInfo;
  }
  if (!displayObjectSize) countInfo = null;
  var countInfoExtra = components.countInfoExtra && components.countInfoExtra({
    count: nameKeys.length,
    level: level,
    showTools: showTools,
    keyName: keyName,
    visible: expand,
    value: valueData,
    namespace: (0, _toConsumableArray2["default"])(namespace),
    parentValue: parentValue,
    setParentValue: setParentValue,
    setValue: setValueData
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)("div", (0, _objectSpread2["default"])((0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    ref: ref
  }, reset), {}, {
    className: "".concat(className, " w-rjv-inner")
  }, eventProps), {}, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsxs)(_value.Line, {
      style: {
        display: 'inline-flex',
        alignItems: 'center'
      },
      onClick: handle,
      children: [arrowView, (typeof keyName === 'string' || typeof keyName === 'number') && /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
        children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_semicolon.Semicolon, {
          value: valueData,
          quotes: quotes,
          "data-keys": keyid,
          namespace: (0, _toConsumableArray2["default"])(namespace),
          render: components.objectKey,
          keyName: keyName,
          parentName: keyName,
          color: typeof keyName === 'number' ? _value.typeMap['number'].color : ''
        }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Colon, {})]
      }), isSet && /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Type, {
        type: "Set"
      }), isMap && /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Type, {
        type: "Map"
      }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_meta.Meta, {
        start: true,
        isArray: isArray,
        level: level,
        render: components.braces
      }), !expand && /*#__PURE__*/(0, _jsxRuntime.jsx)(_ellipsis.Ellipsis, {
        render: components.ellipsis,
        count: nameKeys.length,
        level: level
      }), !expand && /*#__PURE__*/(0, _jsxRuntime.jsx)(_meta.Meta, {
        isArray: isArray,
        level: level,
        render: components.braces
      }), countInfo, countInfoExtra, enableClipboard && /*#__PURE__*/(0, _jsxRuntime.jsx)(_copied.Copied, {
        show: showTools,
        text: valueData,
        onCopied: onCopied,
        render: components === null || components === void 0 ? void 0 : components.copied
      })]
    }), expand && /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Line, {
      className: "w-rjv-content",
      style: {
        borderLeft: 'var(--w-rjv-border-left-width, 1px) var(--w-rjv-line-style, solid) var(--w-rjv-line-color, #ebebeb)',
        marginLeft: 6
      },
      children: entries.length > 0 && (0, _toConsumableArray2["default"])(entries).map(function (_ref10, idx) {
        var _ref11 = (0, _slicedToArray2["default"])(_ref10, 2),
          key = _ref11[0],
          itemVal = _ref11[1];
        var item = itemVal;
        var isMySet = item instanceof Set;
        var isMyMap = item instanceof Map;
        var myValue = isMySet ? Array.from(item) : isMyMap ? Object.fromEntries(item) : item;
        var isEmpty = Array.isArray(myValue) && myValue.length === 0 || (0, _typeof2["default"])(myValue) === 'object' && myValue && !(myValue instanceof Date) && Object.keys(myValue).length === 0;
        if ((Array.isArray(myValue) || isMySet || isMyMap) && !isEmpty) {
          var label = isArray ? idx : key;
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Line, {
            className: "w-rjv-wrap",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RootNode, (0, _objectSpread2["default"])({
              value: myValue,
              isSet: isMySet,
              isMap: isMyMap,
              namespace: [].concat((0, _toConsumableArray2["default"])(namespace), [label]),
              keyName: label,
              keyid: keyid + subkeyid + label
            }, subNodeProps))
          }, label + idx);
        }
        if ((0, _typeof2["default"])(myValue) === 'object' && myValue && !(myValue instanceof Date) && !isEmpty) {
          return /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Line, {
            className: "w-rjv-wrap",
            children: /*#__PURE__*/(0, _jsxRuntime.jsx)(RootNode, (0, _objectSpread2["default"])({
              value: myValue,
              namespace: [].concat((0, _toConsumableArray2["default"])(namespace), [key]),
              keyName: key,
              keyid: keyid + subkeyid + key
            }, subNodeProps))
          }, key + '' + idx);
        }
        if (typeof myValue === 'function') {
          return;
        }
        var renderKey = /*#__PURE__*/(0, _jsxRuntime.jsx)(_semicolon.Semicolon, {
          value: myValue,
          "data-keys": keyid,
          quotes: quotes,
          namespace: [].concat((0, _toConsumableArray2["default"])(namespace), [key]),
          parentName: keyName,
          highlightUpdates: highlightUpdates,
          render: components.objectKey,
          color: typeof key === 'number' ? _value.typeMap['number'].color : '',
          keyName: key
        });
        var length = Array.isArray(myValue) ? myValue.length : getLength(myValue);
        countInfo = /*#__PURE__*/(0, _jsxRuntime.jsx)(CountInfo, {
          children: length
        });
        if (components.countInfo) {
          countInfo = components.countInfo({
            count: length,
            level: level,
            visible: expand
          }) || countInfo;
        }
        return /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.ValueView, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
          components: components,
          namespace: [].concat((0, _toConsumableArray2["default"])(namespace), [key])
        }, valueViewProps), {}, {
          countInfo: countInfo,
          renderKey: renderKey,
          keyName: key,
          isSet: isSet,
          value: myValue
        }), idx);
      })
    }), expand && /*#__PURE__*/(0, _jsxRuntime.jsx)(_value.Line, {
      style: {
        paddingLeft: 2
      },
      children: /*#__PURE__*/(0, _jsxRuntime.jsx)(_meta.Meta, {
        render: components.braces,
        isArray: isArray,
        level: level,
        style: {
          paddingLeft: 2,
          display: 'inline-block'
        }
      })
    })]
  }));
});
RootNode.displayName = 'JVR.RootNode';
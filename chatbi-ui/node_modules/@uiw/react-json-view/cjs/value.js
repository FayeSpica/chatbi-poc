"use strict";

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault")["default"];
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Type = exports.Line = exports.Label = exports.Colon = void 0;
exports.ValueView = ValueView;
exports.getValueString = getValueString;
exports.typeMap = exports.isFloat = void 0;
var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));
var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));
var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));
var _objectSpread2 = _interopRequireDefault(require("@babel/runtime/helpers/objectSpread2"));
var _react = require("react");
var _meta = require("./comps/meta");
var _copied = require("./copied");
var _jsxRuntime = require("react/jsx-runtime");
var _excluded = ["children", "style"],
  _excluded2 = ["children", "length", "style"],
  _excluded3 = ["color", "style", "isURL", "href", "children"],
  _excluded4 = ["value", "parentValue", "setValue", "countInfo", "data", "keyName", "indentWidth", "isSet", "namespace", "renderKey", "components", "quotes", "level", "enableClipboard", "displayObjectSize", "displayDataTypes", "shortenTextAfterLength"],
  _excluded5 = ["children", "color", "fontSize", "opacity", "paddingRight", "style"];
var Line = exports.Line = function Line(props) {
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("div", (0, _objectSpread2["default"])({}, props));
};
Line.displayName = 'JVR.Line';
var isFloat = exports.isFloat = function isFloat(n) {
  return Number(n) === n && n % 1 !== 0 || isNaN(n);
};
var typeMap = exports.typeMap = {
  string: {
    color: 'var(--w-rjv-type-string-color, #cb4b16)',
    label: 'string'
  },
  number: {
    color: 'var(--w-rjv-type-int-color, #268bd2)',
    label: 'int'
  },
  "float": {
    color: 'var(--w-rjv-type-float-color, #859900)',
    label: 'float'
  },
  bigint: {
    color: 'var(--w-rjv-type-bigint-color, #268bd2)',
    label: 'bigint'
  },
  "boolean": {
    color: 'var(--w-rjv-type-boolean-color, #2aa198)',
    label: 'bool'
  },
  date: {
    color: 'var(--w-rjv-type-date-color, #586e75)',
    label: 'date'
  },
  url: {
    color: 'var(--w-rjv-type-url-color, #0969da)',
    label: 'url'
  },
  "null": {
    color: 'var(--w-rjv-type-null-color, #d33682)',
    label: 'null'
  },
  Set: {
    color: 'var(--w-rjv-type-set-color, #268bd2)',
    label: 'Set'
  },
  Map: {
    color: 'var(--w-rjv-type-map-color, #268bd2)',
    label: 'Map'
  },
  NaN: {
    color: 'var(--w-rjv-type-nan-color, #859900)',
    label: 'NaN'
  },
  undefined: {
    color: 'var(--w-rjv-type-undefined-color, #586e75)',
    label: 'undefined'
  }
};
var Colon = exports.Colon = function Colon(_ref) {
  var _ref$children = _ref.children,
    children = _ref$children === void 0 ? ':' : _ref$children,
    style = _ref.style,
    props = (0, _objectWithoutProperties2["default"])(_ref, _excluded);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    className: "w-rjv-colon",
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
      paddingRight: 3
    }, style), {}, {
      color: 'var(--w-rjv-colon-color, var(--w-rjv-color))'
    })
  }, props), {}, {
    children: children
  }));
};
Colon.displayName = 'JVR.Colon';
function getValueString(value) {
  var type = (0, _typeof2["default"])(value);
  var content = '';
  if (typeof value === 'number') {
    type = isFloat(value) ? 'float' : 'number';
    content = value.toString();
    if (isNaN(value)) {
      type = 'NaN';
      content = 'NaN';
    }
  }
  if (typeof value === 'boolean') {
    type = 'boolean';
    content = value.toString();
  }
  if ((0, _typeof2["default"])(value) === 'object' && value instanceof Date) {
    type = 'date';
    content = value.toString();
  }
  if (value === null) {
    type = 'null';
    content = "".concat(value).toLocaleUpperCase();
  }
  if (value === undefined) {
    type = 'undefined';
    content = String(value);
  }
  if (typeof value === 'bigint') {
    type = 'bigint';
    content = "".concat(value, "n");
  }
  var isURL = value instanceof URL;
  if (isURL) {
    type = 'url';
    content = "\"".concat(value.href, "\"");
  }
  if (typeof value === 'string') {
    content = "\"".concat(value, "\"");
  }
  return {
    type: type,
    content: content
  };
}
var RenderShortenTextValue = function RenderShortenTextValue(_ref2) {
  var children = _ref2.children,
    length = _ref2.length,
    style = _ref2.style,
    rest = (0, _objectWithoutProperties2["default"])(_ref2, _excluded2);
  var childrenStr = children;
  var _useState = (0, _react.useState)(length && childrenStr.length >= length),
    _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
    shorten = _useState2[0],
    setShorten = _useState2[1];
  (0, _react.useEffect)(function () {
    return setShorten(length && childrenStr.length >= length);
  }, [length]);
  var click = function click() {
    return setShorten(!shorten);
  };
  var text = shorten ? "".concat(childrenStr.slice(0, length), "...") : childrenStr;
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(RenderStringValue, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, rest), {}, {
    style: (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, style), {}, {
      cursor: 'pointer'
    }),
    onClick: click,
    children: text
  }));
};
RenderShortenTextValue.displayName = 'JVR.RenderShortenTextValue';
var RenderStringValue = function RenderStringValue(_ref3) {
  var color = _ref3.color,
    style = _ref3.style,
    isURL = _ref3.isURL,
    href = _ref3.href,
    children = _ref3.children,
    rest = (0, _objectWithoutProperties2["default"])(_ref3, _excluded3);
  return /*#__PURE__*/(0, _jsxRuntime.jsxs)(Label, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    color: color,
    style: style
  }, rest), {}, {
    className: "w-rjv-value",
    children: [isURL && /*#__PURE__*/(0, _jsxRuntime.jsx)("a", {
      href: href,
      style: {
        color: color
      },
      target: "_blank",
      rel: "noopener noreferrer",
      children: children
    }), !isURL && children]
  }));
};
RenderStringValue.displayName = 'JVR.RenderStringValue';
function ValueView(props) {
  var _typeMap$type;
  var value = props.value,
    parentValue = props.parentValue,
    setValue = props.setValue,
    countInfo = props.countInfo,
    data = props.data,
    keyName = props.keyName,
    indentWidth = props.indentWidth,
    isSet = props.isSet,
    namespace = props.namespace,
    renderKey = props.renderKey,
    _props$components = props.components,
    components = _props$components === void 0 ? {} : _props$components,
    quotes = props.quotes,
    level = props.level,
    enableClipboard = props.enableClipboard,
    displayObjectSize = props.displayObjectSize,
    displayDataTypes = props.displayDataTypes,
    shortenTextAfterLength = props.shortenTextAfterLength,
    reset = (0, _objectWithoutProperties2["default"])(props, _excluded4);
  var color = '';
  var style = {};
  var _getValueString = getValueString(value),
    type = _getValueString.type,
    content = _getValueString.content;
  var typeView = /*#__PURE__*/(0, _jsxRuntime.jsx)(Type, {
    type: type
  });
  if (value === null) {
    typeView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {});
    style = {
      fontWeight: 'bold'
    };
  }
  if (value === undefined || type.toLocaleLowerCase() === 'nan' || !displayDataTypes) {
    typeView = /*#__PURE__*/(0, _jsxRuntime.jsx)(_react.Fragment, {});
  }
  var isURL = value instanceof URL;
  color = ((_typeMap$type = typeMap[type]) === null || _typeMap$type === void 0 ? void 0 : _typeMap$type.color) || '';
  var _useState3 = (0, _react.useState)(false),
    _useState4 = (0, _slicedToArray2["default"])(_useState3, 2),
    showTools = _useState4[0],
    setShowTools = _useState4[1];
  var tools = (0, _react.useMemo)(function () {
    return enableClipboard && showTools && /*#__PURE__*/(0, _jsxRuntime.jsx)(_copied.Copied, {
      show: showTools,
      text: value
    });
  }, [enableClipboard, showTools, value]);
  // const tools = enableClipboard ? <Copied show={showTools} text={value} /> : undefined;
  var eventProps = {
    className: 'w-rjv-line',
    style: {
      paddingLeft: indentWidth
    }
  };
  if (enableClipboard) {
    eventProps.onMouseEnter = function () {
      return setShowTools(true);
    };
    eventProps.onMouseLeave = function () {
      return setShowTools(false);
    };
  }
  if (content && typeof content === 'string') {
    var reView = components.value && components.value({
      className: 'w-rjv-value',
      style: (0, _objectSpread2["default"])({
        color: color
      }, style),
      type: type,
      value: value,
      setValue: setValue,
      data: data,
      parentValue: parentValue,
      quotes: quotes,
      keyName: keyName,
      namespace: namespace,
      visible: showTools,
      content: content,
      children: content
    });
    var valueView = shortenTextAfterLength && type === 'string' ? /*#__PURE__*/(0, _jsxRuntime.jsx)(RenderShortenTextValue, {
      color: color,
      href: isURL ? value.href : '',
      style: style,
      isURL: isURL,
      length: shortenTextAfterLength,
      children: content
    }) : /*#__PURE__*/(0, _jsxRuntime.jsx)(RenderStringValue, {
      color: color,
      href: isURL ? value.href : '',
      style: style,
      isURL: isURL,
      children: content
    });
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Line, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, eventProps), {}, {
      children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Label, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
        ref: null,
        children: [renderKey, /*#__PURE__*/(0, _jsxRuntime.jsx)(Colon, {}), typeView, reView ? reView : valueView, tools]
      }))
    }));
  }
  var empty = /*#__PURE__*/(0, _jsxRuntime.jsxs)(_react.Fragment, {
    children: [/*#__PURE__*/(0, _jsxRuntime.jsx)(_meta.Meta, {
      render: components.braces,
      start: true,
      isArray: Array.isArray(value)
    }), /*#__PURE__*/(0, _jsxRuntime.jsx)(_meta.Meta, {
      render: components.braces,
      isArray: Array.isArray(value)
    }), countInfo]
  });
  return /*#__PURE__*/(0, _jsxRuntime.jsx)(Line, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, eventProps), {}, {
    children: /*#__PURE__*/(0, _jsxRuntime.jsxs)(Label, (0, _objectSpread2["default"])((0, _objectSpread2["default"])({}, reset), {}, {
      ref: null,
      children: [renderKey, /*#__PURE__*/(0, _jsxRuntime.jsx)(Colon, {}), typeView, empty, tools]
    }))
  }));
}
ValueView.displayName = 'JVR.ValueView';
var Label = exports.Label = /*#__PURE__*/(0, _react.forwardRef)(function (_ref4, ref) {
  var children = _ref4.children,
    color = _ref4.color,
    fontSize = _ref4.fontSize,
    opacity = _ref4.opacity,
    paddingRight = _ref4.paddingRight,
    style = _ref4.style,
    reset = (0, _objectWithoutProperties2["default"])(_ref4, _excluded5);
  return /*#__PURE__*/(0, _jsxRuntime.jsx)("span", (0, _objectSpread2["default"])((0, _objectSpread2["default"])({
    style: (0, _objectSpread2["default"])({
      color: color,
      fontSize: fontSize,
      opacity: opacity,
      paddingRight: paddingRight
    }, style)
  }, reset), {}, {
    ref: ref,
    children: children
  }));
});
Label.displayName = 'JVR.Label';
var Type = exports.Type = function Type(props) {
  var _typeMap$type2, _typeMap$type3;
  var type = props.type;
  var color = (_typeMap$type2 = typeMap[type]) === null || _typeMap$type2 === void 0 ? void 0 : _typeMap$type2.color;
  var label = (_typeMap$type3 = typeMap[type]) === null || _typeMap$type3 === void 0 ? void 0 : _typeMap$type3.label;
  if (color && label) {
    return /*#__PURE__*/(0, _jsxRuntime.jsx)(Label, {
      color: color,
      fontSize: 11,
      opacity: 0.8,
      paddingRight: 4,
      className: "w-rjv-type",
      "data-type": type,
      children: label
    });
  }
};
Type.displayName = 'JVR.Type';
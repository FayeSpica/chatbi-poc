import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import { Fragment } from 'react';
import { AddIcon } from './icon/add';
import { DeleteIcon } from './icon/delete';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export function CountInfoExtra(props) {
  var {
    visible,
    showTools,
    editable,
    keyName,
    value,
    namespace,
    parentValue,
    setValue,
    setParentValue,
    onAdd,
    onDelete
  } = props;
  if (!visible || !showTools) return null;
  var click = /*#__PURE__*/function () {
    var _ref = _asyncToGenerator(function* (event) {
      event.stopPropagation();
      var keyOrValue = 'AddKeyOrValue';
      var isArray = Array.isArray(value);
      var isAdd = isArray ? true : !(keyOrValue in value);
      var result = isArray ? [...value, keyOrValue] : _extends({}, value, {
        [keyOrValue]: undefined
      });
      if (onAdd && setValue) {
        var maybeAdd = yield onAdd(keyOrValue, result, props.value, isAdd);
        if (maybeAdd) {
          setValue(result);
        }
      }
    });
    return function click(_x) {
      return _ref.apply(this, arguments);
    };
  }();
  var deleteHandle = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* (event) {
      event.stopPropagation();
      if (onDelete && (keyName || typeof keyName === 'number') && parentValue) {
        var maybeDelete = yield onDelete(keyName, value, parentValue, {
          namespace
        });
        if (maybeDelete && setParentValue) {
          if (Array.isArray(parentValue)) {
            parentValue.splice(keyName, 1);
            setParentValue([...parentValue]);
          } else if (keyName in parentValue) {
            delete parentValue[keyName];
            setParentValue(_extends({}, parentValue));
          }
        }
      }
    });
    return function deleteHandle(_x2) {
      return _ref2.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [editable && onAdd && /*#__PURE__*/_jsx(AddIcon, {
      onClick: click
    }), editable && onDelete && parentValue && /*#__PURE__*/_jsx(DeleteIcon, {
      onClick: deleteHandle
    })]
  });
}
CountInfoExtra.displayName = 'JVR.CountInfoExtra';
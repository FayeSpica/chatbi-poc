import _extends from "@babel/runtime/helpers/extends";
import _asyncToGenerator from "@babel/runtime/helpers/asyncToGenerator";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["type", "value", "setValue", "data", "keyName", "visible", "quotes", "style", "children", "namespace", "displayDataTypes", "editableValue", "parentValue", "onDelete", "onEdit"];
import { Fragment, useEffect, useRef, useState } from 'react';
import { getValueString, isFloat, Type, typeMap } from '../value';
import { EditIcon } from './icon/edit';
import { DeleteIcon } from './icon/delete';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
var Quotes = _ref => {
  var {
    show,
    style,
    quotes
  } = _ref;
  if (!quotes || !show) return;
  return /*#__PURE__*/_jsx("span", {
    style: style,
    children: quotes
  });
};
export function ReValue(props) {
  var _typeMap$typeStr;
  var {
      type,
      value,
      setValue,
      data,
      keyName,
      visible,
      quotes,
      style,
      namespace,
      displayDataTypes,
      editableValue,
      parentValue,
      onDelete,
      onEdit
    } = props,
    reset = _objectWithoutPropertiesLoose(props, _excluded);
  var [editable, setEditable] = useState(false);
  var $edit = useRef(null);
  var [curentType, setCurentType] = useState(type);
  var [curentChild, setCurentChild] = useState(value);
  useEffect(() => setCurentChild(value), [value]);
  var click = evn => {
    evn.stopPropagation();
    if (!editableValue) return;
    if ($edit.current) {
      var _$edit$current;
      setEditable(true);
      $edit.current.setAttribute('contentEditable', 'true');
      (_$edit$current = $edit.current) == null || _$edit$current.focus();
    }
  };
  var keyDown = evn => {
    if (!editableValue) return;
    if (evn.key === 'Enter') {
      evn.stopPropagation();
      evn.preventDefault();
      setEditable(false);
      if ($edit.current) {
        $edit.current.setAttribute('contentEditable', 'false');
      }
    }
  };
  var blur = /*#__PURE__*/function () {
    var _ref2 = _asyncToGenerator(function* () {
      if (!editableValue) return;
      setEditable(false);
      if ($edit.current) {
        $edit.current.setAttribute('contentEditable', 'false');
        var text = $edit.current.innerHTML;
        var _typeStr = curentType;
        if (curentType === 'number' || curentType === 'float') {
          text = Number(text);
          _typeStr = isFloat(text) ? 'float' : 'number';
        }
        if (curentType === 'url' && typeof text === 'string') {
          text = new URL(text);
          _typeStr = 'url';
        }
        if (Number.isNaN(text)) {
          _typeStr = 'number';
        }
        if (typeof text === 'string' && /^(true|false)$/gi.test(text)) {
          text = /^(true)$/gi.test(text) ? true : false;
          _typeStr = 'boolean';
        } else if (typeof text === 'string' && /^[\d]+n$/gi.test(text)) {
          text = BigInt(text.replace(/n$/gi, ''));
          _typeStr = 'bigint';
        } else if (typeof text === 'string' && /^(null)$/gi.test(text)) {
          text = null;
          _typeStr = 'null';
        } else if (typeof text === 'string' && /^(NaN)$/gi.test(text)) {
          text = NaN;
          _typeStr = 'NaN';
        } else if (typeof text === 'string' && /^(undefined)$/gi.test(text)) {
          text = undefined;
          _typeStr = 'undefined';
        } else if (typeof text === 'string') {
          try {
            if (text && text.length > 19 && !isNaN(Date.parse(text))) {
              var dt = new Date(text);
              text = dt;
              _typeStr = 'date';
            }
          } catch (error) {}
        }
        if (onEdit) {
          var result = yield onEdit({
            type: 'value',
            value: text,
            oldValue: curentChild,
            namespace
          });
          if (result) {
            setCurentType(_typeStr);
            setCurentChild(text);
          } else {
            var {
              content: oldChildStr
            } = getValueString(curentChild);
            $edit.current.innerHTML = String(oldChildStr);
          }
        }
      }
    });
    return function blur() {
      return _ref2.apply(this, arguments);
    };
  }();
  var defaultStyle = {
    minWidth: 34,
    minHeight: 18,
    paddingInline: 3,
    display: 'inline-block'
  };
  var {
    type: typeStr,
    content: childStr
  } = getValueString(curentChild);
  var color = ((_typeMap$typeStr = typeMap[typeStr]) == null ? void 0 : _typeMap$typeStr.color) || '';
  var spanProps = _extends({}, reset, {
    onBlur: blur,
    onKeyDown: keyDown,
    spellCheck: false,
    style: editable ? _extends({}, style, defaultStyle, {
      color
    }) : _extends({}, style, {
      color
    })
  });
  var typeView = /*#__PURE__*/_jsx(Type, {
    type: typeStr
  });
  if (typeStr === 'null' || typeStr === 'undefined' || type.toLocaleLowerCase() === 'nan') {
    typeView = /*#__PURE__*/_jsx(Fragment, {});
  }
  var deleteHandle = /*#__PURE__*/function () {
    var _ref3 = _asyncToGenerator(function* (evn) {
      evn.stopPropagation();
      if (data && keyName && keyName in data && setValue && onDelete) {
        var maybeDelete = yield onDelete(keyName, value, parentValue, {
          namespace
        });
        if (maybeDelete) {
          delete data[keyName];
          setValue(_extends({}, data));
        }
      }
    });
    return function deleteHandle(_x) {
      return _ref3.apply(this, arguments);
    };
  }();
  return /*#__PURE__*/_jsxs(Fragment, {
    children: [displayDataTypes && typeView, /*#__PURE__*/_jsx(Quotes, {
      style: style,
      quotes: quotes,
      show: typeStr === 'string'
    }), /*#__PURE__*/_jsx("span", _extends({}, spanProps, {
      ref: $edit,
      "data-value": childStr,
      children: typeof curentChild === 'string' ? curentChild : childStr
    })), /*#__PURE__*/_jsx(Quotes, {
      style: style,
      quotes: quotes,
      show: typeStr === 'string'
    }), visible && editableValue && onEdit && /*#__PURE__*/_jsx(EditIcon, {
      onClick: click
    }), visible && editableValue && onDelete && /*#__PURE__*/_jsx(DeleteIcon, {
      onClick: deleteHandle
    })]
  });
}
ReValue.displayName = 'JVR.ReValue';
import _extends from "@babel/runtime/helpers/extends";
import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
var _excluded = ["children", "render", "color", "value", "className", "keyName", "highlightUpdates", "quotes", "style", "namespace", "parentName"];
import { useMemo, useRef, useEffect } from 'react';
import { Label } from './value';
import { jsx as _jsx } from "react/jsx-runtime";
export function usePrevious(value) {
  var ref = useRef();
  useEffect(() => {
    ref.current = value;
  });
  return ref.current;
}
export function useHighlight(_ref) {
  var {
    value,
    highlightUpdates,
    highlightContainer
  } = _ref;
  var prevValue = usePrevious(value);
  var isHighlight = useMemo(() => {
    if (!highlightUpdates || prevValue === undefined) return false;
    // highlight if value type changed
    if (typeof value !== typeof prevValue) {
      return true;
    }
    if (typeof value === 'number') {
      // notice: NaN !== NaN
      if (isNaN(value) && isNaN(prevValue)) return false;
      return value !== prevValue;
    }
    // highlight if isArray changed
    if (Array.isArray(value) !== Array.isArray(prevValue)) {
      return true;
    }
    // not highlight object/function
    // deep compare they will be slow
    if (typeof value === 'object' || typeof value === 'function') {
      return false;
    }

    // highlight if not equal
    if (value !== prevValue) {
      return true;
    }
    return false;
  }, [highlightUpdates, value]);
  useEffect(() => {
    if (highlightContainer && highlightContainer.current && isHighlight && 'animate' in highlightContainer.current) {
      highlightContainer.current.animate([{
        backgroundColor: 'var(--w-rjv-update-color, #ebcb8b)'
      }, {
        backgroundColor: ''
      }], {
        duration: 1000,
        easing: 'ease-in'
      });
    }
  }, [isHighlight, value, highlightContainer]);
}
export var Semicolon = _ref2 => {
  var {
      render,
      color,
      value,
      className = 'w-rjv-object-key',
      keyName,
      highlightUpdates,
      quotes,
      style,
      namespace,
      parentName
    } = _ref2,
    props = _objectWithoutPropertiesLoose(_ref2, _excluded);
  var highlightContainer = useRef(null);
  var content = typeof keyName === 'string' ? "" + quotes + keyName + quotes : keyName;
  if (render) {
    return render(_extends({
      className
    }, props, {
      value,
      namespace,
      style: _extends({}, style, {
        color
      }),
      parentName,
      keyName,
      quotes,
      label: keyName,
      children: content
    }));
  }
  useHighlight({
    value,
    highlightUpdates,
    highlightContainer
  });
  return /*#__PURE__*/_jsx(Label, _extends({
    className: className,
    color: color
  }, props, {
    ref: highlightContainer,
    children: content
  }));
};
Semicolon.displayName = 'JSR.Semicolon';
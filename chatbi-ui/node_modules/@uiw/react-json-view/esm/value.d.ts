import type { FC, PropsWithChildren } from 'react';
import type { JsonViewProps } from './';
export declare const Line: FC<PropsWithChildren<React.HTMLAttributes<HTMLDivElement>>>;
export declare const isFloat: (n: number) => boolean;
export declare const typeMap: {
    string: {
        color: string;
        label: string;
    };
    number: {
        color: string;
        label: string;
    };
    float: {
        color: string;
        label: string;
    };
    bigint: {
        color: string;
        label: string;
    };
    boolean: {
        color: string;
        label: string;
    };
    date: {
        color: string;
        label: string;
    };
    url: {
        color: string;
        label: string;
    };
    null: {
        color: string;
        label: string;
    };
    Set: {
        color: string;
        label: string;
    };
    Map: {
        color: string;
        label: string;
    };
    NaN: {
        color: string;
        label: string;
    };
    undefined: {
        color: string;
        label: string;
    };
};
export declare const Colon: FC<PropsWithChildren<React.HTMLAttributes<HTMLSpanElement>>>;
export interface ValueViewProps<T extends object> extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {
    keyName?: string | number;
    value?: unknown;
    parentValue?: T;
    data?: T;
    displayDataTypes: boolean;
    displayObjectSize: boolean;
    enableClipboard: boolean;
    isSet: boolean;
    indentWidth: number;
    level?: number;
    shortenTextAfterLength?: JsonViewProps<T>['shortenTextAfterLength'];
    namespace?: Array<string | number>;
    quotes?: JsonViewProps<T>['quotes'];
    components?: JsonViewProps<T>['components'];
    renderKey?: JSX.Element;
    countInfo?: JSX.Element;
    setValue?: React.Dispatch<React.SetStateAction<T>>;
}
export declare function getValueString<T>(value: T): {
    type: "string" | "number" | "bigint" | "boolean" | "undefined" | "date" | "url" | "float" | "null" | "Set" | "Map" | "NaN";
    content: string;
};
export declare function ValueView<T extends object>(props: ValueViewProps<T>): import("react/jsx-runtime").JSX.Element;
export declare namespace ValueView {
    var displayName: string;
}
export interface LabelProps extends React.HTMLAttributes<HTMLSpanElement> {
    color?: string;
    fontSize?: number;
    opacity?: number;
    paddingRight?: number;
}
export declare const Label: import("react").ForwardRefExoticComponent<LabelProps & import("react").RefAttributes<HTMLSpanElement>>;
export interface TypeProps extends React.DetailedHTMLProps<React.HTMLAttributes<HTMLSpanElement>, HTMLSpanElement> {
    type: keyof typeof typeMap;
}
export declare const Type: FC<PropsWithChildren<TypeProps>>;

import _objectWithoutPropertiesLoose from "@babel/runtime/helpers/objectWithoutPropertiesLoose";
import _extends from "@babel/runtime/helpers/extends";
var _excluded = ["children", "style"],
  _excluded2 = ["children", "length", "style"],
  _excluded3 = ["color", "style", "isURL", "href", "children"],
  _excluded4 = ["value", "parentValue", "setValue", "countInfo", "data", "keyName", "indentWidth", "isSet", "namespace", "renderKey", "components", "quotes", "level", "enableClipboard", "displayObjectSize", "displayDataTypes", "shortenTextAfterLength"],
  _excluded5 = ["children", "color", "fontSize", "opacity", "paddingRight", "style"];
import { Fragment, forwardRef, useMemo, useEffect, useState } from 'react';
import { Meta } from './comps/meta';
import { Copied } from './copied';
import { jsx as _jsx } from "react/jsx-runtime";
import { jsxs as _jsxs } from "react/jsx-runtime";
export var Line = props => /*#__PURE__*/_jsx("div", _extends({}, props));
Line.displayName = 'JVR.Line';
export var isFloat = n => Number(n) === n && n % 1 !== 0 || isNaN(n);
export var typeMap = {
  string: {
    color: 'var(--w-rjv-type-string-color, #cb4b16)',
    label: 'string'
  },
  number: {
    color: 'var(--w-rjv-type-int-color, #268bd2)',
    label: 'int'
  },
  float: {
    color: 'var(--w-rjv-type-float-color, #859900)',
    label: 'float'
  },
  bigint: {
    color: 'var(--w-rjv-type-bigint-color, #268bd2)',
    label: 'bigint'
  },
  boolean: {
    color: 'var(--w-rjv-type-boolean-color, #2aa198)',
    label: 'bool'
  },
  date: {
    color: 'var(--w-rjv-type-date-color, #586e75)',
    label: 'date'
  },
  url: {
    color: 'var(--w-rjv-type-url-color, #0969da)',
    label: 'url'
  },
  null: {
    color: 'var(--w-rjv-type-null-color, #d33682)',
    label: 'null'
  },
  Set: {
    color: 'var(--w-rjv-type-set-color, #268bd2)',
    label: 'Set'
  },
  Map: {
    color: 'var(--w-rjv-type-map-color, #268bd2)',
    label: 'Map'
  },
  NaN: {
    color: 'var(--w-rjv-type-nan-color, #859900)',
    label: 'NaN'
  },
  undefined: {
    color: 'var(--w-rjv-type-undefined-color, #586e75)',
    label: 'undefined'
  }
};
export var Colon = _ref => {
  var {
      children = ':',
      style
    } = _ref,
    props = _objectWithoutPropertiesLoose(_ref, _excluded);
  return /*#__PURE__*/_jsx("span", _extends({
    className: "w-rjv-colon",
    style: _extends({
      paddingRight: 3
    }, style, {
      color: 'var(--w-rjv-colon-color, var(--w-rjv-color))'
    })
  }, props, {
    children: children
  }));
};
Colon.displayName = 'JVR.Colon';
export function getValueString(value) {
  var type = typeof value;
  var content = '';
  if (typeof value === 'number') {
    type = isFloat(value) ? 'float' : 'number';
    content = value.toString();
    if (isNaN(value)) {
      type = 'NaN';
      content = 'NaN';
    }
  }
  if (typeof value === 'boolean') {
    type = 'boolean';
    content = value.toString();
  }
  if (typeof value === 'object' && value instanceof Date) {
    type = 'date';
    content = value.toString();
  }
  if (value === null) {
    type = 'null';
    content = ("" + value).toLocaleUpperCase();
  }
  if (value === undefined) {
    type = 'undefined';
    content = String(value);
  }
  if (typeof value === 'bigint') {
    type = 'bigint';
    content = value + "n";
  }
  var isURL = value instanceof URL;
  if (isURL) {
    type = 'url';
    content = "\"" + value.href + "\"";
  }
  if (typeof value === 'string') {
    content = "\"" + value + "\"";
  }
  return {
    type,
    content
  };
}
var RenderShortenTextValue = _ref2 => {
  var {
      children,
      length,
      style
    } = _ref2,
    rest = _objectWithoutPropertiesLoose(_ref2, _excluded2);
  var childrenStr = children;
  var [shorten, setShorten] = useState(length && childrenStr.length >= length);
  useEffect(() => setShorten(length && childrenStr.length >= length), [length]);
  var click = () => setShorten(!shorten);
  var text = shorten ? childrenStr.slice(0, length) + "..." : childrenStr;
  return /*#__PURE__*/_jsx(RenderStringValue, _extends({}, rest, {
    style: _extends({}, style, {
      cursor: 'pointer'
    }),
    onClick: click,
    children: text
  }));
};
RenderShortenTextValue.displayName = 'JVR.RenderShortenTextValue';
var RenderStringValue = _ref3 => {
  var {
      color,
      style,
      isURL,
      href,
      children
    } = _ref3,
    rest = _objectWithoutPropertiesLoose(_ref3, _excluded3);
  return /*#__PURE__*/_jsxs(Label, _extends({
    color: color,
    style: style
  }, rest, {
    className: "w-rjv-value",
    children: [isURL && /*#__PURE__*/_jsx("a", {
      href: href,
      style: {
        color
      },
      target: "_blank",
      rel: "noopener noreferrer",
      children: children
    }), !isURL && children]
  }));
};
RenderStringValue.displayName = 'JVR.RenderStringValue';
export function ValueView(props) {
  var _typeMap$type;
  var {
      value,
      parentValue,
      setValue,
      countInfo,
      data,
      keyName,
      indentWidth,
      namespace,
      renderKey,
      components = {},
      quotes,
      enableClipboard,
      displayDataTypes,
      shortenTextAfterLength
    } = props,
    reset = _objectWithoutPropertiesLoose(props, _excluded4);
  var color = '';
  var style = {};
  var {
    type,
    content
  } = getValueString(value);
  var typeView = /*#__PURE__*/_jsx(Type, {
    type: type
  });
  if (value === null) {
    typeView = /*#__PURE__*/_jsx(Fragment, {});
    style = {
      fontWeight: 'bold'
    };
  }
  if (value === undefined || type.toLocaleLowerCase() === 'nan' || !displayDataTypes) {
    typeView = /*#__PURE__*/_jsx(Fragment, {});
  }
  var isURL = value instanceof URL;
  color = ((_typeMap$type = typeMap[type]) == null ? void 0 : _typeMap$type.color) || '';
  var [showTools, setShowTools] = useState(false);
  var tools = useMemo(() => enableClipboard && showTools && /*#__PURE__*/_jsx(Copied, {
    show: showTools,
    text: value
  }), [enableClipboard, showTools, value]);
  // const tools = enableClipboard ? <Copied show={showTools} text={value} /> : undefined;
  var eventProps = {
    className: 'w-rjv-line',
    style: {
      paddingLeft: indentWidth
    }
  };
  if (enableClipboard) {
    eventProps.onMouseEnter = () => setShowTools(true);
    eventProps.onMouseLeave = () => setShowTools(false);
  }
  if (content && typeof content === 'string') {
    var reView = components.value && components.value({
      className: 'w-rjv-value',
      style: _extends({
        color
      }, style),
      type,
      value,
      setValue,
      data,
      parentValue,
      quotes,
      keyName,
      namespace,
      visible: showTools,
      content,
      children: content
    });
    var valueView = shortenTextAfterLength && type === 'string' ? /*#__PURE__*/_jsx(RenderShortenTextValue, {
      color: color,
      href: isURL ? value.href : '',
      style: style,
      isURL: isURL,
      length: shortenTextAfterLength,
      children: content
    }) : /*#__PURE__*/_jsx(RenderStringValue, {
      color: color,
      href: isURL ? value.href : '',
      style: style,
      isURL: isURL,
      children: content
    });
    return /*#__PURE__*/_jsx(Line, _extends({}, eventProps, {
      children: /*#__PURE__*/_jsxs(Label, _extends({}, reset, {
        ref: null,
        children: [renderKey, /*#__PURE__*/_jsx(Colon, {}), typeView, reView ? reView : valueView, tools]
      }))
    }));
  }
  var empty = /*#__PURE__*/_jsxs(Fragment, {
    children: [/*#__PURE__*/_jsx(Meta, {
      render: components.braces,
      start: true,
      isArray: Array.isArray(value)
    }), /*#__PURE__*/_jsx(Meta, {
      render: components.braces,
      isArray: Array.isArray(value)
    }), countInfo]
  });
  return /*#__PURE__*/_jsx(Line, _extends({}, eventProps, {
    children: /*#__PURE__*/_jsxs(Label, _extends({}, reset, {
      ref: null,
      children: [renderKey, /*#__PURE__*/_jsx(Colon, {}), typeView, empty, tools]
    }))
  }));
}
ValueView.displayName = 'JVR.ValueView';
export var Label = /*#__PURE__*/forwardRef((_ref4, ref) => {
  var {
      children,
      color,
      fontSize,
      opacity,
      paddingRight,
      style
    } = _ref4,
    reset = _objectWithoutPropertiesLoose(_ref4, _excluded5);
  return /*#__PURE__*/_jsx("span", _extends({
    style: _extends({
      color,
      fontSize,
      opacity,
      paddingRight
    }, style)
  }, reset, {
    ref: ref,
    children: children
  }));
});
Label.displayName = 'JVR.Label';
export var Type = props => {
  var _typeMap$type2, _typeMap$type3;
  var {
    type
  } = props;
  var color = (_typeMap$type2 = typeMap[type]) == null ? void 0 : _typeMap$type2.color;
  var label = (_typeMap$type3 = typeMap[type]) == null ? void 0 : _typeMap$type3.label;
  if (color && label) {
    return /*#__PURE__*/_jsx(Label, {
      color: color,
      fontSize: 11,
      opacity: 0.8,
      paddingRight: 4,
      className: "w-rjv-type",
      "data-type": type,
      children: label
    });
  }
};
Type.displayName = 'JVR.Type';